object Q1 {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  import EuclidianSpace._
  import scala.collection.breakOut
  
  val coords = List((25,125), (44,105), (29,97), (35,63), (55,63), (42,57), (23,40), (64,37), (33,22), (55,20))
                                                  //> coords  : List[(Int, Int)] = List((25,125), (44,105), (29,97), (35,63), (55,
                                                  //| 63), (42,57), (23,40), (64,37), (33,22), (55,20))
  
 	val c = Clustering(coords.map(i => Point(i._1,i._2) ):_*)
                                                  //> c  : EuclidianSpace.Clustering.Clustering = [64.0,37.0] -> List([64.0,37.0])
                                                  //| 
                                                  //| [44.0,105.0] -> List([44.0,105.0])
                                                  //| [25.0,125.0] -> List([25.0,125.0])
                                                  //| [35.0,63.0] -> List([35.0,63.0])
                                                  //| [33.0,22.0] -> List([33.0,22.0])
                                                  //| [23.0,40.0] -> List([23.0,40.0])
                                                  //| [29.0,97.0] -> List([29.0,97.0])
                                                  //| [55.0,20.0] -> List([55.0,20.0])
                                                  //| [42.0,57.0] -> List([42.0,57.0])
                                                  //| [55.0,63.0] -> List([55.0,63.0])
	
	val pCoords = List((28,145),
	(65,140),
	(50,130),
	(55,118),
	(38,115),
	(50,90),
	(63,88),
	(43,83),
	(50,60),
	(50,30))                                  //> pCoords  : List[(Int, Int)] = List((28,145), (65,140), (50,130), (55,118), (
                                                  //| 38,115), (50,90), (63,88), (43,83), (50,60), (50,30))
	
	val points = pCoords.map(i=>Point(i._1,i._2))
                                                  //> points  : List[EuclidianSpace.Point] = List([28.0,145.0], [65.0,140.0], [50.
                                                  //| 0,130.0], [55.0,118.0], [38.0,115.0], [50.0,90.0], [63.0,88.0], [43.0,83.0],
                                                  //|  [50.0,60.0], [50.0,30.0])
	
	val c2 = c.addPoints(points)              //> c2  : EuclidianSpace.Clustering.Clustering = [64.0,37.0] -> List([64.0,37.0]
                                                  //| )
                                                  //| [44.0,105.0] -> List([63.0,88.0], [50.0,90.0], [38.0,115.0], [55.0,118.0], [
                                                  //| 65.0,140.0], [44.0,105.0])
                                                  //| [25.0,125.0] -> List([50.0,130.0], [28.0,145.0], [25.0,125.0])
                                                  //| [35.0,63.0] -> List([35.0,63.0])
                                                  //| [33.0,22.0] -> List([33.0,22.0])
                                                  //| [23.0,40.0] -> List([23.0,40.0])
                                                  //| [29.0,97.0] -> List([43.0,83.0], [29.0,97.0])
                                                  //| [55.0,20.0] -> List([50.0,30.0], [55.0,20.0])
                                                  //| [42.0,57.0] -> List([42.0,57.0])
                                                  //| [55.0,63.0] -> List([50.0,60.0], [55.0,63.0])
	c2.recomputeCentroids.resetMembers.addPoints(points).clusters.map(_._1).mkString("\n")
                                                  //> res0: String = [64.0,37.0]
                                                  //| [52.5,25.0]
                                                  //| [52.5,61.5]
                                                  //| [35.0,63.0]
                                                  //| [33.0,22.0]
                                                  //| [23.0,40.0]
                                                  //| [52.5,109.33333333333333]
                                                  //| [36.0,90.0]
                                                  //| [42.0,57.0]
                                                  //| [34.333333333333336,133.33333333333334]
	c2.recomputeCentroids.clusters.map(_._1).mkString("\n")
                                                  //> res1: String = [64.0,37.0]
                                                  //| [52.5,25.0]
                                                  //| [52.5,61.5]
                                                  //| [35.0,63.0]
                                                  //| [33.0,22.0]
                                                  //| [23.0,40.0]
                                                  //| [52.5,109.33333333333333]
                                                  //| [36.0,90.0]
                                                  //| [42.0,57.0]
                                                  //| [34.333333333333336,133.33333333333334]


}